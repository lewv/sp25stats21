---
title: "Week 1, Meeting 1"
self-contained: true
format: 
  revealjs:
    smaller: true
    scrollable: true
    code-fold: true
    embed-resources: true
    slide-number: true
jupyter: python3
---

# Part 1: Intro 

## Technical Skills
- R (Stats 20) Python (here) a little SQL (here)
- Data Wrangling & Cleaning
- Data Visualization
- Feature Engineering

## Analytical & Statistical Skills
- Probability & Statistics
- Data Exploration

## Problem-Solving & Soft Skills
- Python will force you to break down complex problems into smaller, manageable steps, 
- Also think logically to design solutions,  
- You will think like a computer scientist
- Communication & Storytelling

## Today's Topic 1: Stats 21 Tools 

- Please check your **Python** installation
- Please check for **git** and **GitHub** (do you have an account?)
- Please check for the installation of a proper source code editor (I use **VS Code**, free + awesome)
- And something interactive such as Jupyter Notebook or Quarto installed (for homework, presentations, webpages, etc.)

## terminal (MacOS) or powershell/cmd (Windows)

![terminal on a mac](../_images/terminal.png)


## Check for Python

Try this at your terminal prompt or powershell/cmd prompt

```
python --version
```

![python version](../_images/check_python.png)

## Checking in Windows

![python version](../_images/check_python_windows.png)



## Let's see about git 

Try this at your terminal prompt (MacOS) powershell prompt (Windows)

```
git --version
```

![git version](../_images/check_git.png)

- Git is a version control system.  GitHub is a hosting platform.
- Git is primarily used for tracking changes in code by software developers 
- But anyone who can benefit from sharing and tracking changes in code can use it.

## git on Windows

![git windows version](../_images/git_windows.png)


## GitHub

GitHub is a collection of tools and services used by software developers 
which uses git for version control

![GitHub](../_images/check_github.png)

## Using GitHub the Git hosting platform

- This quarter I will post some material to GitHub
- You _could_ point and click and download
- BUT it would be better if you knew how to use git to check for updates and download modified versions
- And that you should learn to keep your own repositories

## Quick & Dirty using Git & GitHub

- Pull
- Add
- Commit
- Push
- ...But the easiest thing is to get VS Code and GitHub working together [Using Git with Visual Studio](https://www.youtube.com/watch?v=i_23KUAEtUM&t=300s)

## Visual Studio Code (VS Code) 

- free, lightweight (easy on resources), powerful source code editor 
![VSCode](../_images/vscode.png)

## Show you (some of) the ways

- Interactive Python/Python in the Shell
- A Python Script (like an R script)
- Jupyter Notebook (interactive like R Markdown)
- Quarto (like a Jupyter Notebook on roids)

## But first... Checking Installations

![Checking Installations in the shell](../_images/check_versions.png)

## Interactive Python

![Shell Python](../_images/python_terminal.png)

## Code from Documentation

![Example Code from Documentation](../_images/code_snippet_documentation.png)

## Result

![Example Code Result](../_images/code_snippet_run.png)

## Result (from terminal in VS Code)

![Example Code Result](../_images/code_snippet_run2.png)

## Python script (.py) VSCode Example


![Example .py](../_images/python_script.png)


## Jupyter Notebook

An interactive document that can mix code and text and create web pages 
and related

![Jupyter Example](../_images/jupyter_example.png)


## This was presentation and the code below were written using Quarto 

```{python}
#| echo: true
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
(fig, ax) = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

# Activity
## What's in a name?

- Please gather together in small groups, please make sure at least one 
member has a laptop 
- minimum group size 3, maximum group size 6
- introduce yourselves, try to learn a new name today
- take a group photo
- upload a copy of your photo for class credit

## What to do while in your group

- try to determine whether Python, git and some kind of code editor (e.g., VS Code) exist 
on your group's computers
- just take some notes for your own personal use if you do not already have these installed as to how to install it or get advice from your group.
- if no one has a computer and or no one as Python installed, please reach out to your neighboring groups for help
- then let's have some feedback

# Part 2: A little language example
## Let's Back up a little

- Where do we start?
- Maybe with the "Zen of Python" (PEP 20)
  [https://peps.python.org/pep-0020/](https://peps.python.org/pep-0020/)
- Then an example
- Then objects, naming, reserved keywords, the print function, iterators

## Opening words of PEP 20

- Beautiful is better than ugly.  
- Explicit is better than implicit.  
- Simple is better than complex.  
- Complex is better than complicated.  
- Flat is better than nested.  
- Sparse is better than dense.  
- Readability counts.  

## Readable, beautiful, self-evident

Python is like poetry and every word and symbol matter.  An example.

::: {.panel-tabset}

### Ex 1
```{python}
#| echo: true
#| label: absolutely basic example with numbers
for count in 0, 1, 2, 3, 4, 5:
  print(count)
```

recall (in Stats 20) **for** iterates, same in Python


### Ex 2

```{python}
#| echo: true
#| label: absolutely basic example with strings
for spell in "Expelliarmus", "Colloshoo", "Legilimens", "Impedimenta", "Confundo",  "Finite Incantatem", "Incarcerous":
  print(spell)
```

### Ex 3

spells is a _list_ (much more about those later) it is a data structure. We could also call it a container object.  A list holds other objects.  

```{python}
#| echo: true
#| label: object creation also list
spells = [
  "Expelliarmus",
  "Colloshoo",
  "Legilimens",
  "Impedimenta",
  "Confundo", 
  "Finite Incantatem",
  "Incarcerous"
]
for spell in spells:
    print(spell)
```

:::

## Why more readable, more beautiful, more self-evident?

Previously our iterable object was a tuple (implied). An **iterable** is any object that can be looped over, meaning you can access its elements one by one.  While it ran without error, the fact that it is a tuple could have been more obvious:

```{python}
#| echo: true
#| label: tuple creation made explicit
for spell in ("Expelliarmus", "Colloshoo", "Legilimens", "Impedimenta", 
              "Confundo",  "Finite Incantatem", "Incarcerous"):
  print(spell)
```

There are many other spells mentioned in the Harry Potter series of books.  This iterable object probably doesn't scale well.  It also isn't reusable (we cannot easily call it again later in a program)

## There is an ending (maybe)

BUT we can **re-use** the existing _list_ object **spells** and we can **avoid** the 
**for** loop structure. '\\n' is interpreted as "new line" . In this 
context '\\n' is a separator and is also a string (note the single quotes).  
Our code is now very  "Pythonic".

```{python}
#| echo: true
#| label: Avoid for and work with the list directly
print('\n'.join(spells))
```

Understanding this is not for today if you are just starting out.  It's what you are working towards as an end goal. 

## What is Pythonic? (a goal)

- I don't think there is an official definition but review PEP 20 again.

- Describes writing your code in a manner that incorporates the principles and characteristics of the Python programming language. 

- Utilizing the concise, expressive, and readable features of Python to write efficient, clear and pretty code

- I would also add "easy to modify code"


## Objects (more later)

- Everything in Python is an object -- numbers, strings, lists, tuples, 
and even functions, these are all objects.
- Every object is created from some class (we will learn to make these later)
- A class is a set of instructions or a template for creating objects.

## Example: Object Creation

```{python}
#| echo: true
#| label: Object creation
x = 5
y = 5
spells = [
    "Expelliarmus",
    "Colloshoo",
    "Legilimens",
    "Impedimenta",
    "Confundo",
    "Finite Incantatem",
    "Incarcerous",
]
z = range(6)

print(f"This is the value of x: {x}")
print(f"This is the second spell of spells: {spells[1]}")
print(f"This is the value of z: {z}")
```

## Objects have...

- ID
- type
- value
- reference count

## Example: ID

```{python}
#| echo: true
#| label: Checking an object's id
print(id(x))
print(id(y))
print(id(spells))
print(id(z))
print(id(print))

y = "UCLA"
print(id(y))
```

## Example: Object Type

```{python}
#| echo: true
#| label: Checking an object's type
print(type(x))
print(type(y))
print(type(spells))
print(type(z))
print(type(print))
```


## Object Value

```{python}
#| echo: true
#| label: Checking an object's value
print(x)
print(y)
print(spells[1])
print(z)
```

```{python}
#| echo: true
#| label: z is a range
for count in z:
  print(count)
```

## Rules for Variable Names

They can have:  
  - Lowercase letters (a through z)  
  - Uppercase letters (A through Z)  
  - Digits (0 through 9)   
  - The Underscore (_)  

They are case-sensitive

They can begin with a letter or an underscore but not a digit.

They cannot be one of Pythonâ€™s reserved keywords.


## Reserved Keywords

- Please avoid using reserved keyword names as object names. 
- Keywords have specific and predefined meanings. 
- Using them as object names causes confusion and  syntax errors.

```{python}
#| eval: false
#| echo: true
#| label: Reserved keywords

import keyword
keywords = keyword.kwlist
for kw in keywords:
  print(kw)
```

```
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
```

## Commonly seen keywords

We have already seem some of these on our first day.  By the end of the quarter, you should be very familiar with these.

```
if, else, for, while, 
True, False, def, return, 
import, from, as,
and, elif, in, not, or, pass
```

[https://docs.python.org/3/reference/lexical_analysis.html#keywords](https://docs.python.org/3/reference/lexical_analysis.html#keywords)


## a little more advanced 

We **might** see a few of these much later in the course. 

```
try, except, finally, raise, class, 
self, None, del, lambda, with, yield
```

We will work with the common keywords and try to give you the scaffolding to move to the less common if you need it beyond Stats 21.

## Naming (PEP 8)

- See [PEP 8](https://peps.python.org/pep-0008/)
- These are the coding conventions for Python for the standard library in the main Python distribution.
- A worthy code editor will implement most of the rules for you
- BUT naming is something special to you

## Some common rules for Stats 21

- Never use the characters â€˜lâ€™ (lowercase letter el), â€˜Oâ€™ (uppercase letter oh), or â€˜Iâ€™ (uppercase letter eye) as single character variable names.

- Function names should be lowercase, with words separated by underscores as necessary to improve readability.

- Variable names follow the same convention as function names.

- Please capitalize the first letter when defining a Class (e.g., CapitalizedWords)

- If you create a Python constant please use snake case with all caps (MAXIMUM_ITERATION)

# Activity 2 (with others please)
## Create some variables

- Please start an interactive interpreter if you can, and type print(42). 

- It should echo 42 on the next line.

- Try assigning the literal value 7 to two variables with two different names (e.g. x and y). 

- Try some illegal names to see what error messages Python tosses back to you.

# Part 3: The fundamentals

## The building blocks

- Data Types
- Operators
- Control Flow (order of execution)
- Functions (and Methods)

## More about type

| Name	 | Type	  | Mutable?| Example |
|--------|--------|---------|---------|
| Integer  | int    | no    | 3 -256 |
| Boolean  | bool   | no    | True False |
| Floating Point | float  | no | 1e5 2.718 |
| Complex        | complex | no | 10j 2 + 1j |
| Text | str | no | "UCLA" "The quick brown fox" |
| List | list | yes | ["Expelliarmus", "Confundo"] |
| Tuple | tuple | no | (0, 2, 4, 6) |


: Some of the basic types {.striped .hover}

## Integers (int)



## Boolean (bool)

- A boolean can only be True or False.
- Booleans mostly seen in control flow statements (e.g., if) to direct execution.
- can assign a boolean value directly
- Most comparison operations (e.g., ==, !=, <, >) return a boolean
- bool is a subclass of int so True and False behave like the integers 1 and 0.

## Boolean Example

```{python}
#| echo: true
#| label: Boolean Behavior
flag = True
if flag:
    print("Flag is True!")
else:
    print("Flag is False!")

result = (3 > 5)

print(f"The result of 3 > 5 is: {result}")
```

## Floats (float)


## Text (str)


## List (list)


## Tuple (tuple)

# Takeaways

## After lecture 1

- Access to Python, an editor, maybe Git & GitHub
- Python philosophy
- Everything is an object
- Names, naming rules
- Data Types

# Thank you