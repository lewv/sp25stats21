---
title: "Bird Age Calculator in Python using Quarto"
author: "Spring 2025 Stats 21"
date:   "04-01-2025"
format: html
---

This is my example Quarto document.   

I am going to calculate the human equivalent age for birds today using Python.

```{python}
bird_age = 8
human_age = bird_age * 5

print(f"A parrot who is age {bird_age} is actually {human_age} in human years")
```

# Foundational Understanding: Expressions & Variables

With Python, we processes values and produces results.  
We typically assign values to variables.  (e.g. bird_age = 8)
We manipulate variables with operators.  (e.g., human_age = bird_age * 5)

Python programs evaluate expressions based upon input values

# Reusability and Organization

In Python, programmers use and/or write functions to manage the information or the task better.

Instead of rewriting calculations each time, we define functions.  

Functions make code reusable and easy to manage/maintain.  We "def" functions - example:

```{python}
def bird_to_human_years(bird_age):
    return bird_age * 5

print(f"Your bird's age in human years is: {bird_to_human_years(8)}")  
```

What if you have multiple birds? 

We need a sequence.

```{python}
ages = range(0,11)

for age in ages:
    print(f"If your bird's age is {age}, in human years your bird is {bird_to_human_years(age)}")
```

## Good practice: Input Validation (Handling Incorrect Inputs)

- The idea - the functions you write should only process valid inputs.
- What happens if the data contains -3? The result wouldnâ€™t make sense.
- The fix: use conditional statements (if, elif, else).

We should be or become "defensive" programmers and defend against bad input.

```{python}
def bird_to_human_years(bird_age):
    if bird_age <= 0:
        return "Age must be a positive number."
    return bird_age * 5

new_ages = [-3, 1, 2, 7]
for age in new_ages:
    print(bird_to_human_years(age))
```

# Stop and Check for understanding

- Python processes code sequentially  
- Python execute one instruction at a time.  

Example:  

The bird_to_human_years function is called with bird_age = -3.  
The if statement checks bird_age <= 0. It is true, returns a warning.  

The for allows Python to iterate (repeat) and process the next value.  
The function computes 1 * 5 = 5 and returns the result.  
Python repeats (iterates) until there are no more elements left in the sequence.   
It is passing each new value to the function and returning either a message or a computed value.  

If the code is clear, you should be able to trace execution logically, anticipating what happens at each step.  

# Modification

Suppose you wish to process a value like 2.5 years?  What could you do? Could we/should enforce rounding?

This is where the Python REPL is useful for something quick, but Jupyter and Quarto are just as forgiving:

```{python}
# let's test it first

new_ages = [-3, 1, 2.5, 7]
for age in new_ages:
    print(bird_to_human_years(age))
```

Suppose we need a nice message printed with the number? What can you do? At what point would you insert the message?

f-print is really handy here, enclose the entire string in quotes and variables are enclosed in curly braces:

```{python}
# let's modify the message 
new_ages = [-3, 1, 2.5, 7]
for age in new_ages:
    print(f"Your bird is {bird_to_human_years(age)} in human years")
```

Not so good, we didn't think it through well enough.  Try again.

```{python}
# another try

new_ages = [-3, 1, 2.5, 7]
for age in new_ages:
    if age <= 0:
        print(bird_to_human_years(age))
    else:
        print(f"Your bird is {bird_to_human_years(age)} in human years")
```

Suppose you wanted to allow users to input values (this won't run interactively in Quarto, but it will in a Jupyter notebook)

```
def bird_to_human_years(bird_age):
    if bird_age <= 0:
        return "Age must be a positive number."
    return f"Your bird is {bird_age * 5} in human years"

bird_age = float(input("What the bird's age? "))
print(bird_to_human_years(bird_age))
```

But this is very awkward, so we move it to a script.   

We will call it bird_age.py  

We will need to open it as a separate file.  

Save it and maybe do a couple of things.  

![Running bird_age.py at the terminal prompt](_images/bird_age.png)


# Additional Tasks, Challenges

1.  Allow multiple kinds of animals (e.g., dog, cat)
2.  Outline what you will need (e.g., need to find out what kind of pet, need to find formulas for translating their age, need to write separate functions)